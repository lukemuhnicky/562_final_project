
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv
from helpers import update_agg_value




"""
SELECT ATTRIBUTE(S):
cust, 0_sum_quant, 1_sum_quant, 2_sum_quant, 3_sum_quant
NUMBER OF GROUPING VARIABLES(n):
3
GROUPING ATTRIBUTES(V):
cust
F-VECT([F]):
0.year = 2018, 1_avg_quant, 2_avg_quant, 3_avg_quant
SELECT CONDITION-VECT([o]):
    0.year = 2018, 1.state = 'NY' and 1.year = 2018, 2.state = 'NJ and 2.year = 2018, 3.state = 'CT' and 3.year = 2018
HAVING_CONDITION(G):
NONE
"""

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()
    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')
    
    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    data = cur.fetchall()
    
    _global = []

    
    groupby = {}
    for row in data:
        key = row['cust']
        if key not in groupby:
            groupby[key] = {
                    '0_sum_quant' : 0,
                    '1_avg_quant' : [0,0], #1st is sum, 2nd is count
                    '1_sum_quant' : 0,
                    '2_sum_quant' : 0,
                    '3_avg_quant' : [0,0],
                    '3_sum_quant' : 0
                }
        else:
            pass
    for row in data: 
        grouping_attr = row['cust']
        if row['year'] == 2018:
            grouping_var = 0
            if row['state'] == 'NJ' and row['year'] == 2018:
                grouping_var = 1
            elif row['state'] == 'CT' and row['year'] == 2018:
                grouping_var = 2
            elif row['state'] == 'NY' and row['year'] == 2018:
                grouping_var = 3
        else:
            continue
        
        wechanging = groupby[grouping_attr]
        update_agg_value(wechanging, 0, row)
        if grouping_var != 0:
            update_agg_value(wechanging, grouping_var, row)

        
    #check if we have any averages and change them
    for grouping_attr_key, grouping_attr in groupby.items():
        for agg_func_key, agg_func in grouping_attr.items():
            if 'avg' in agg_func_key:
                avg_list = groupby[grouping_attr_key][agg_func_key]
                groupby[grouping_attr_key][agg_func_key] = avg_list[0]/avg_list[1] 
           
    ## input_string = "apple and banana or orange and pear"

    # Split the string by "and" and "or"
    # result = re.split(r'\b(?:and|or)\b', input_string)
    ## 1_sum_quant > 2 * 2_sum_quant or 1_avg_quant > 3_avg_quant
        if (groupby[grouping_attr_key]['1_sum_quant'] > 2 * groupby[grouping_attr_key]['2_sum_quant'] or groupby[grouping_attr_key]['1_avg_quant'] > groupby[grouping_attr_key]['3_avg_quant']):
            _global.append({'cust': grouping_attr_key, '0_sum_quant': groupby[grouping_attr_key]['0_sum_quant'],'1_sum_quant': groupby[grouping_attr_key]['1_sum_quant'], '2_sum_quant': groupby[grouping_attr_key]['2_sum_quant'], '3_sum_quant': groupby[grouping_attr_key]['3_sum_quant']})
        
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print("Complete mofo")
    print(query())
    
if "__main__" == __name__:
    main()
    
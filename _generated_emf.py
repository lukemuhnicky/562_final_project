import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv
from helpers import update_agg_value




"""
SELECT ATTRIBUTE(S):
cust, month, 0_avg_quant, 1_avg_quant, 2_avg_quant
NUMBER OF GROUPING VARIABLES(n):
3
GROUPING ATTRIBUTES(V):
cust, month
F-VECT([F]):
0_avg_quant, 1_avg_quant, 2_avg_quant
SELECT CONDITION-VECT([o]):
0.year = 2018, 1.cust = cust and 1.month < month, 2.cust = cust and 2.month > month
HAVING_CONDITION(G):
NONE
"""

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()
    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')
    
    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    data = cur.fetchall()
    
    _global = []

    
    groupby = {}
    for row in data:
        if row['year'] == 2018:

            key = row['cust'] + "," + str(row['month'])
            if key not in groupby:
                groupby[key] = {
                        '0_avg_quant' : [0,0], #1st is sum, 2nd is count
                        '1_avg_quant' : [0,0], 
                        '2_avg_quant' : [0,0], 
                    }
            else:
                pass

    #Pass 0
    for row in data: 
        grouping_attr = str(row['cust']) + "," + str(row['month'])
        if row['year'] == 2018:
            for key in groupby: 
                grouping_var = 0 
                grouping_vars = key.split(',')
                for item in grouping_vars:
                    if item.isnumeric():
                        grouping_vars[grouping_vars.index(item)] = int(item)
                item_cust = grouping_vars[0]
                item_month = grouping_vars[1]
                if item_cust == row['cust'] and item_month == row['month']:
                    grouping_var = 0
                else: 
                    continue
                wechanging = groupby[key]
                update_agg_value(wechanging, grouping_var, row)

    # Pass 1 
    for row in data: 
        grouping_attr = str(row['cust']) + "," + str(row['month'])
        if row['year'] == 2018:
            for key in groupby:
                grouping_var = 0 
                grouping_attrs = key.split(',')
                for item in grouping_attrs:
                    if item.isnumeric():
                        grouping_attrs[grouping_attrs.index(item)] = int(item)
                item_cust = grouping_attrs[0]
                item_month = grouping_attrs[1]
                if item_cust == row['cust'] and item_month < row['month']:
                    grouping_var = 1
                else:
                    continue
                wechanging = groupby[key]
                update_agg_value(wechanging, grouping_var, row)
    
    # Pass 2
    for row in data: 
        grouping_attr = str(row['cust']) + "," + str(row['month'])
        if row['year'] == 2018:
            for key in groupby: 
                grouping_var = 0 
                grouping_vars = key.split(',')
                for item in grouping_vars:
                    if item.isnumeric():
                        grouping_vars[grouping_vars.index(item)] = int(item)
                item_cust = grouping_vars[0]
                item_month = grouping_vars[1]
                if item_cust == row['cust'] and item_month > row['month']:
                    grouping_var = 2
                else:
                    continue
                wechanging = groupby[key]
                update_agg_value(wechanging, grouping_var, row)
        
    #check if we have any averages and change them
    for grouping_attr_key, grouping_attr in groupby.items():
        for agg_func_key, agg_func in grouping_attr.items():

            if 'avg' in agg_func_key:
                avg_list = groupby[grouping_attr_key][agg_func_key]
                if avg_list[1] == 0:
                    groupby[grouping_attr_key][agg_func_key] = 0
                else:
                    avg_list = groupby[grouping_attr_key][agg_func_key]
                    groupby[grouping_attr_key][agg_func_key] = avg_list[0]/avg_list[1] 
           
    ## input_string = "apple and banana or orange and pear"

    # Split the string by "and" and "or"
    # result = re.split(r'\b(?:and|or)\b', input_string)
    ## 1_sum_quant > 2 * 2_sum_quant or 1_avg_quant > 3_avg_quant
        if True:
            _global.append({'cust,month': grouping_attr_key,'0_avg_quant':groupby[grouping_attr_key]['0_avg_quant'],'1_avg_quant':groupby[grouping_attr_key]['1_avg_quant'],'2_avg_quant':groupby[grouping_attr_key]['2_avg_quant']})
        
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print("Complete mofo")
    print(query())
    
if "__main__" == __name__:
    main()
    